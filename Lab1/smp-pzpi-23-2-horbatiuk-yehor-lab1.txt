МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ

Звіт

з лабораторної роботи №1
з дисципліни
«Скриптові мови програмування»


Виконав:                                                                                                   Перевірив:
ст. гр. ПЗПІ-23-2 
Горбатюк Єгор

ст. викладач кафедри ПІ
Сокорчук Ігор Петрович


Харків – 2025







ЗАВДАННЯ

Розробити Bash-скрипт, який обробляє експортований із сайту https://cist.nure.ua/ розклад занять для всіх груп потоку в форматі CSV та перетворює його у формат CSV для завантаження в Google Календар https://support.google.com/.

ХІД РОБОТИ

Створимо скрипт `cist_converter.sh`. Вказуємо оболонку:

1  #!/bin/bash

Створимо функцію для виводу помилок з повідомленням та завершенням:

2  error() {
3      echo "Error: \$1." >&2;
4      exit \$2;
5  }

Реалізуємо функцію вибору елементів через select:

6  select\_from(){
7      if \[ -n "\$2" -a \$(echo "\$1" | wc -l) -eq 1 ]; then echo "\$1"; return 0; fi
8
9      select selected in quit \$1; do
10          case "\$selected" in
11              '') continue ;;
12              'quit') return 1 ;;
13              \*) echo "\$selected"; return 0 ;;
14          esac
15      done
16  }

Додамо підтримку командних аргументів:

17  if \[ "\$1" = "--version" ]; then echo 'cist converter 1.0'; exit 0; fi
18  if \[ "\$1" = "--help" ]; then
19      echo "Usage: \$0 \[--help | --version] | \[-q|--quiet] \[\[академ\_група] файл\_із\_cist.csv]"
20      echo 'Convert schedule.csv from CIST format into Google Calendar format'
21      echo -e "  --help \t\tPrint this help message and exit"
22      echo -e "  --version \t\tPrint version info and exit"
23      echo -e "  -q, --quiet \t\tDo not print the result to stdout"
24      echo -e "  академ\_група \t\tOptional group name"
25      echo -e "  файл\_із\_cist.csv \tCSV file to process"
26      exit 0;
27  }

Обробимо прапор тихого режиму:

28  exec 3>&1;
29  if \[ "\$1" = "-q" -o "\$1" = "--quiet" ]; then exec 3>/dev/null; shift; fi

Зберемо параметри: групу і CSV-файл:

30  if \[ \$# -eq 2 ]; then group="\$1"; shift; fi
31  if \[ \$# -eq 1 ]; then csv="\$1"; fi

Сформуємо список доступних файлів CSV у каталозі:

32  csvs=\$(ls TimeTable\_??\_??\_20??.csv 2>/dev/null | sort)

Запропонуємо користувачу обрати файл, якщо його не передано:

33  if \[ -z "\$csv" ]; then csv=\$(select\_from "\$csvs") || exit 0; fi

Перевіримо існування та права доступу до файлу:

34  if \[ ! -f "\$csv" ]; then error "file '\$csv' is not exist" 1; fi
35  if \[ ! -r "\$csv" ]; then error "permission to read file '\$csv' denied" 2; fi

Сконвертуємо кодування вхідного CSV та зберемо його в змінну:

36  csv\_data=\$( cat "\$csv" | sed 's/\r/\n/g' | iconv -f cp1251 -t utf8 )

Отримаємо список унікальних груп із CSV-файлу:

37  groups=\$(
38      echo "\$csv\_data"&#x20;
39      | awk -v FPAT='\[^,]*|"\[^"]*"' '
40          NR > 1 {
41              gsub(/^"/, "", \$1);
42              if (split(\$1, res, " - ") != 1) print res\[1]
43          }
44      '&#x20;
45      | sort&#x20;
46      | uniq
47  )

Запропонуємо вибір групи, якщо не була задана в параметрах:

48  if \[ -z "\$group" ]; then group=\$(select\_from "\$groups" "skip") || exit 0; fi

Якщо введено неіснуючу групу, запропонуємо вибрати іншу:

49  if ! echo "\$groups" | grep "\$group"; then
50      echo "No '\$group' group in '\$csv'."
51      group=\$(select\_from "\$groups" "skip") || exit 0;
52  fi

Основна обробка: фільтрація, форматування, формування рядків для Google Calendar:

53  echo "\$csv\_data"&#x20;
54  | awk -v FPAT='\[^,]*|"\[^"]*"' -v pattern="\$(\[ -n "\$group" ] && echo "^"\$group - ")" '
55      function time\_fmt(time) {
56          gsub(/:|"/, " ", time)
57          return strftime("%I:%M %p", mktime("1970 01 01" time))
58      }
59
60      function date\_fmt(date) {
61          gsub(/"/, "", date)
62          split(date, dp, ".")
63          return strftime("%m/%d/%Y", mktime(dp\[3] " " dp\[2] " " dp\[1] " 00 00 00"))
64      }
65
66      NR==1 { print "Subject,Start Date,Start Time,End Date,End Time,Description" }
67
68      NR!=1 && \$1 \~ pattern {
69          gsub(pattern "|^"|"\$", "", \$1)
70
71          printf(""%s; №%d",%s,%s,%s,%s,%s\n",
72              \$1, ++lessons\[\$2], date\_fmt(\$2), time\_fmt(\$3), date\_fmt(\$4), time\_fmt(\$5), \$12)
73      }
74  '&#x20;
75  | tee "Google\_\$(basename "\$csv")" >&3








ВИСНОВКИ

У результаті виконання практичної роботи було опановано принципи створення Bash-скриптів для обробки CSV-файлів і створено скрипт для перетворення файлів розкладу с сайту університету для гугл календарю.
Посилання на відеозвіт: https://youtu.be/cr8848s036g

 
ДОДАТОК А
Відеозвіт

Посилання на відеозвіт: https://youtu.be/cr8848s036g
 
ДОДАТОК Б
Програмний код
1  #!/bin/bash
 2  
 3  error() {
 4      echo "Error: $1." >&2;
 5      exit $2;
 6  }
 7  
 8  select_from(){
 9      if [ -n "$2" -a $(echo "$1" | wc -l) -eq 1 ]; then echo "$1"; return 0; fi
10  
11      select selected in quit $1; do
12          case "$selected" in
13              '') continue ;;
14              'quit') return 1 ;;
15              *) echo "$selected"; return 0 ;;
16          esac
17      done
18  }
19  
20  if [ "$1" = "--version" ]; then echo 'cist converter 1.0'; exit 0; fi
21  if [ "$1" = "--help" ]; then
22      echo "Usage: $0 [--help | --version] | [-q|--quiet] [[академ_група] файл_із_cist.csv]"
23      echo 'Convert schedule.csv from CIST format into Google Calendar format'
24      echo -e "  --help \t\tPrint this help message and exit"
25      echo -e "  --version \t\tPrint version info and exit"
26      echo -e "  -q, --quiet \t\tDo not print the result to stdout"
27      echo -e "  академ_група \t\tOptional group name"
28      echo -e "  файл_із_cist.csv \tCSV file to process"
29      exit 0;
30  fi
31  
32  exec 3>&1;
33  if [ "$1" = "-q" -o "$1" = "--quiet" ]; then exec 3>/dev/null; shift; fi
34  
35  if [ $# -eq 2 ]; then group="$1"; shift; fi
36  if [ $# -eq 1 ]; then csv="$1"; fi
37  
38  csvs=$(ls TimeTable_??_??_20??.csv 2>/dev/null | sort)
39  
40  if [ -z "$csv" ]; then csv=$(select_from "$csvs") || exit 0; fi
41  
42  if [ ! -f "$csv" ]; then error "file '$csv' is not exist" 1; fi
43  if [ ! -r "$csv" ]; then error "permission to read file '$csv' denied" 2; fi
44  
45  csv_data=$( cat "$csv" | sed 's/\r/\n/g' | iconv -f cp1251 -t utf8 )
46  
47  groups=$(
48      echo "$csv_data" \
49      | awk -v FPAT='[^,]*|"[^"]*"' '
50          NR > 1 {
51              gsub(/^"/, "", $1);
52              if (split($1, res, " - ") != 1) print res[1]
53          }
54      ' \
55      | sort \
56      | uniq
57  )
58  
59  if [ -z "$group" ]; then group=$(select_from "$groups" "skip") || exit 0; fi
60  
61  if ! echo "$groups" | grep "$group"; then
62      echo "No '$group' group in '$csv'."
63      group=$(select_from "$groups" "skip") || exit 0;
64  fi
65  
66  echo "$csv_data" \
67  | awk -v FPAT='[^,]*|"[^"]*"' -v pattern="$([ -n "$group" ] && echo "^\"$group - ")" '
68      function time_fmt(time) {
69          gsub(/:|"/, " ", time)
70          return strftime("%I:%M %p", mktime("1970 01 01" time))
71      }
72  
73      function date_fmt(date) {
74          gsub(/"/, "", date)
75          split(date, dp, ".")
76          return strftime("%m/%d/%Y", mktime(dp[3] " " dp[2] " " dp[1] " 00 00 00"))
77      }
78  
79      NR==1 { print "Subject,Start Date,Start Time,End Date,End Time,Description" }
80  
81      NR!=1 && $1 ~ pattern {
82          gsub(pattern "|^\"|\"$", "", $1)
83  
84          printf("\"%s; №%d\",%s,%s,%s,%s,%s\n",
85              $1, ++lessons[$2], date_fmt($2), time_fmt($3), date_fmt($4), time_fmt($5), $12)
86      }
87  ' \
88  | tee "Google_$(basename "$csv")" >&3
